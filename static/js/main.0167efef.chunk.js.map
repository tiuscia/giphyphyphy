{"version":3,"sources":["layouts/SearchLayout/SearchLayout.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchLayout","useState","searchQuery","setSearchQuery","apiSearchQuery","setApiSearchQuery","results","setResults","error","setError","useEffect","a","fetch","process","fetchedData","json","jsonData","console","log","data","length","map","item","images","preview","mp4","fetchData","className","onSubmit","e","preventDefault","value","onChange","target","placeholder","type","id","for","key","autoPlay","loop","src","App","Helmet","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4SAyEeA,MAtEf,WAAyB,IAAD,EACgBC,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,OAEsBF,mBAAS,IAF/B,mBAEfG,EAFe,KAECC,EAFD,OAGQJ,mBAAS,IAHjB,mBAGfK,EAHe,KAGNC,EAHM,OAIIN,oBAAS,GAJb,mBAIfO,EAJe,KAIRC,EAJQ,KAsCpB,OAhCFC,qBAAU,WAAM,4CAEd,8BAAAC,EAAA,6DACIF,GAAS,GACTF,EAAW,IAFf,kBAIkCK,MAAM,gDAAD,OAAiDC,mCAAjD,cAA0FT,EAA1F,wCAJvC,cAIcU,EAJd,gBAK+BA,EAAYC,OAL3C,OAKcC,EALd,OAMQC,QAAQC,IAAI,OAAQF,GACQ,IAAzBA,EAASG,KAAKC,OACbX,GAAS,GAETF,EACIS,EAASG,KAAKE,KAAI,SAAAC,GACd,OAAOA,EAAKC,OAAOC,QAAQC,QAZ/C,kDAmBQhB,GAAS,GACTQ,QAAQC,IAAR,MApBR,2DAFc,sBA0BQ,KAAnBd,GA1BY,WAAD,wBA2BVsB,KAEN,CAACtB,IAIK,yBAAKuB,UAAU,iBACf,wCACA,0BAAMC,SAAU,SAAAC,GACZA,EAAEC,iBACFzB,EAAkBH,KAEd,yBAAKyB,UAAU,gCACf,2BACJA,UAAU,QACVI,MAAO7B,EACP8B,SAAW,SAAAH,GAAC,OAAG1B,EAAe0B,EAAEI,OAAOF,QACvCG,YAAY,eACZC,KAAK,OACLC,GAAG,WACH,2BAAOC,IAAI,UAAX,WAGA,4BAAQF,KAAK,UAAb,iBAEH7B,EAAQc,OAAS,GAAK,yDACvB,yBAAKO,UAAU,yBACVnB,GAAS,oDACbF,EAAQe,KAAI,SAAAC,GAAI,OACb,2BAAOgB,IAAKhB,EAAMiB,UAAQ,EAACC,MAAI,EAACC,IAAKnB,U,MCjDlCoB,MAXf,WACE,OACE,yBAAKf,UAAU,OACf,kBAACgB,EAAA,EAAD,KACA,0BAAMC,KAAK,2EAA2EC,IAAI,gBAE1F,kBAAC,EAAD,QCCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLS,QAAQT,MAAMA,EAAMuD,c","file":"static/js/main.0167efef.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './SearchLayout.scss';\n\nfunction SearchLayout() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [apiSearchQuery, setApiSearchQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    \n    async function fetchData(){\n        setError(false);\n        setResults([]);\n        try{\n            const fetchedData = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${process.env.REACT_APP_GIPHY_API_KEY}&q=${apiSearchQuery}&limit=25&offset=0&rating=G&lang=en`);\n            const jsonData = await fetchedData.json();\n            console.log('json', jsonData);\n            if(jsonData.data.length === 0){\n                setError(true);\n            } else {\n                setResults(\n                    jsonData.data.map(item=>{\n                        return item.images.preview.mp4;\n                    })\n                );\n            }\n            \n        }\n        catch(e){\n            setError(true);\n            console.log(e)\n        }\n    };\n\n    if(apiSearchQuery !== ''){\n        fetchData();\n    }\n},[apiSearchQuery]);\n\n\n    return (\n        <div className=\"search-layout\">\n        <h1>Giphyphy</h1>\n        <form onSubmit={e=>{\n            e.preventDefault();\n            setApiSearchQuery(searchQuery);}\n            }>\n                <div className=\"search-layout__swing-wrapper\">\n                <input \n            className=\"swing\" \n            value={searchQuery} \n            onChange={ e=> setSearchQuery(e.target.value)}\n            placeholder=\"Search c'mon\"\n            type=\"text\"\n            id=\"search\" />\n            <label for=\"search\">search</label>\n                </div>\n            \n            <button type=\"submit\">searchphyphy</button>\n        </form>\n        {results.length > 0 && <h2>here are your giphyphyphy</h2>}\n        <div className=\"search-layout__videos\">\n            {error && <span>Sorry. No results.</span>}\n        {results.map(item => (\n            <video key={item} autoPlay loop src={item}/>\n        ))}\n        </div>\n        \n        </div>\n    );\n}\n\nexport default SearchLayout;","import React from 'react';\nimport {Helmet} from \"react-helmet\";\nimport SearchLayout from './layouts/SearchLayout/SearchLayout.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Helmet>\n    <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap\" rel=\"stylesheet\"/>\n    </Helmet>\n    <SearchLayout />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}